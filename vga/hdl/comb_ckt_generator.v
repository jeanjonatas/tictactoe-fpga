//============================================================================
// comb_ckt_generator.v
//
// This code is generated by Terasic System Builder
// and modified by M. Hildebrand and B. Baas
//
// 2018/02/05 First version
// 2018/04/24 Routed all board-level switches and LEDs to and from this module
//============================================================================

module comb_ckt_generator (
   // VGA-related signals
   col,
   row,
   red,
   green,
   blue,
   // input push buttons and switches
   KEY,
   SW,
   // output LEDs and 7-segment displays
   LEDR,
   HEX0,
   HEX1,
   HEX2,
   HEX3,
   HEX4,
   HEX5,
   clock,
   matrizJogo
   );

input  [9:0]  col;
input  [8:0]  row;
output reg [3:0]  red;    // 4-bit color output
output reg [3:0]  green;  // 4-bit color output
output reg [3:0]  blue;   // 4-bit color output

// input push buttons and switches
input  [1:0]  KEY;    // two board-level push buttons KEY1 - KEY0
input  [9:0]  SW;     // ten board-level switches SW9 - SW0

// output LEDs and 7-segment displays
output [9:0]  LEDR;   // ten board-level LEDs LEDR9 - LEDR0
output [7:0]  HEX0;   // board-level 7-segment display
output [7:0]  HEX1;   // board-level 7-segment display
output [7:0]  HEX2;   // board-level 7-segment display
output [7:0]  HEX3;   // board-level 7-segment display
output [7:0]  HEX4;   // board-level 7-segment display
output [7:0]  HEX5;   // board-level 7-segment display
input clock;
input [1:0] matrizJogo [0:8];

initial begin
	matrizJogo[0] <= 1;
end


//============================================================================
//  reg/wire declarations
//============================================================================
// More complex implementations will likely declare RGB outputs as regs
// rather than wires

//output reg [3:0] red;


//============================================================================
// Board-LED related circuits
//============================================================================

// Temporary simple logic
// The 10 LEDs will light depending on the position of the adjacent 10 switches
assign LEDR = SW;      // ten LEDs assigned to ten switches

// Temporary simple logic
// This block sets the 7-segment HEX displays
// HEX4 - HEX0 are set to all dark
// HEX5 lights segments based on SW9 - SW2
assign HEX0 = 8'b1111_1111;
assign HEX1 = 8'b1111_1111;
assign HEX2 = 8'b1111_1111;
assign HEX3 = 8'b1111_1111;
assign HEX4 = 8'b1111_1111;
assign HEX5 = ~{SW[9], SW[8], SW[7], SW[6], SW[5], SW[4], SW[3], SW[2]};


//==============================================================
// VGA display related circuits
//==============================================================

// Temporary simple logic
// Full intensity is SW[0] is '1'. Blank otherwise
//assign red     = SW[0] ? 4'hf : 4'h0; 
//assign green   = SW[1] ? 4'hf : 4'h0;
//assign blue    = SW[2] ? 4'hf : 4'h0;

integer positionLine = 157;
integer increment = 6;
integer positionColumn = 197;

always @(posedge clock) begin
	matrizJogo[0] <= 1;
	matrizJogo[1] <= 0;
	matrizJogo[2] <= 1;
	matrizJogo[3] <= 0;
	matrizJogo[4] <= 1;
	matrizJogo[5] <= 0;
	matrizJogo[8] <= 1;
	
	
	
		//draw lines
		if(((row > positionLine) && (row < positionLine + increment)) || ((row > positionLine*2) && (row < increment + positionLine*2)))begin
			red <= 255;
			green <= 255;
			blue <= 255;
			end
		//draw columns	
		else if(((col > positionColumn) && (col < positionColumn + increment)) || ((col > positionColumn*2) && (col < increment + positionColumn*2)))begin
			red <= 255;
			green <= 255;
			blue <= 255;
			end
		
		//draw first square
		else if((row > 10 && col > 10) && (row < 140 && col < 180))begin
			
			if(matrizJogo[0]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[0]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end
		
		//draw second square
		else if((row > 10 && col > 210) && (row < 140 && col < 390))begin
			
			if(matrizJogo[1]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[1]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end 

	//draw third square
		else if((row > 10 && col > 410) && (row < 140 && col < 590))begin
			
			if(matrizJogo[2]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[2]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end 

			//draw fourth square
		else if((row > 170 && col > 10) && (row < 300 && col < 180))begin
			
			if(matrizJogo[3]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[3]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end 
	
		//draw fifth square
		else if((row > 170 && col > 210) && (row < 300 && col < 390))begin
			
			if(matrizJogo[4]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[4]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end 

	//draw sixth square
		else if((row > 170 && col > 410) && (row < 300 && col < 590))begin
			
			if(matrizJogo[5]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[5]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end

		//draw seventh square
		else if((row > 330 && col > 10) && (row < 470 && col < 180))begin
			
			if(matrizJogo[6]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[6]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end
	
		//draw eight square
		else if((row > 330 && col > 210) && (row < 470 && col < 390))begin
			
			if(matrizJogo[7]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[7]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end 
		
		//draw ninth square
		else if((row > 330 && col > 410) && (row < 470 && col < 590))begin
			
			if(matrizJogo[8]==1)begin
				red <= 0;
				green <= 255;
				blue <= 0;
			end
			else if(matrizJogo[8]==0)begin
				red <= 0;
				green <= 0;
				blue <= 255;
			end
		end 
			
		else begin
			red <= 000;
			green <= 000;
			blue <= 000;
				
		end
		
	//red <= (((row>400) && (col>100))&&((row<(500)) && (col<(200)))) ? 4'hf : 4'h0;	


end


endmodule
